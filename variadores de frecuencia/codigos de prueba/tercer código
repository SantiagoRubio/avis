#include <ModbusMaster.h>

// Configuración de la conexión RS485
#define TX_PIN 17  // Pin para transmisión
#define RX_PIN 16  // Pin para recepción
#define DE_PIN 4   // Pin para control de transmisión (DE)
#define RE_PIN 2   // Pin para control de recepción (RE)

// Crear el objeto Modbus
ModbusMaster modbus;

// Dirección esclavo del variador
uint8_t slaveID = 1;  // Cambiar según el ID del variador

// Registro de frecuencia del variador (ejemplo común)
uint16_t frequencyRegister = 0x2000; // Este es un ejemplo, verifica el registro correcto

void preTransmission() {
  digitalWrite(DE_PIN, HIGH);
  digitalWrite(RE_PIN, HIGH);
}

void postTransmission() {
  digitalWrite(DE_PIN, LOW);
  digitalWrite(RE_PIN, LOW);
}

void setup() {
  Serial.begin(115200); // Serial de depuración
  Serial2.begin(9600, SERIAL_8N1, RX_PIN, TX_PIN);  // Configuración del puerto serial 2 del ESP32 para RS485
  
  // Inicializar pines de control
  pinMode(DE_PIN, OUTPUT);
  pinMode(RE_PIN, OUTPUT);
  
  // Inicializar Modbus
  modbus.begin(slaveID, Serial2);  // Usamos Serial2 para RS485
  modbus.preTransmission(preTransmission);
  modbus.postTransmission(postTransmission);

  Serial.println("Ingrese la frecuencia deseada en Hz:");
}

void loop() {
  if (Serial.available() > 0) {
    // Leer la entrada del usuario
    String input = Serial.readStringUntil('\n');
    uint16_t frequencyValue = input.toInt();

    // Escribir el valor de la frecuencia en el registro del variador
    uint8_t result = modbus.writeSingleRegister(frequencyRegister, frequencyValue);
    if (result == modbus.ku8MBSuccess) {
      Serial.print("Frecuencia establecida a: ");
      Serial.print(frequencyValue);
      Serial.println(" Hz");
    } else {
      Serial.println("Error al escribir la frecuencia.");
    }
  }

  delay(1000); // Espera de 1 segundo
}
